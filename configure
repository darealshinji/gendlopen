#!/bin/sh

use_def_cflags="yes"
use_def_cxxflags="yes"
use_def_cppflags="yes"
use_def_ldflags="yes"
check_xxd="yes"

# parse arguments
for i in "$@"
do
case $i in
    --help|-h)
        cat <<EOL
usage: $0 OPTIONS

set compilers:
    cc=..  cxx=..  ccbuild=..

host triplet:
    host=..

set clang-cl:
    cl=..

override flags:
    cflags=..  cxxflags=..  cppflags=..  ldlfags=..

append extra flags:
    xcflags=..  xcxxflags=..  xcppflags=..  xldlfags=..

set ar tool:
    ar=..

set gendlopen tool used for cross-compiling tests:
    gdo=..

don't search for xxd tool:
    --no-xxd

print this help:
    -h, --help

EOL
        exit 0
        ;;

    cc=*)
        CC="${i#*=}"
        ;;
    cxx=*)
        CXX="${i#*=}"
        ;;
    ccbuild=*)
        CCBUILD="${i#*=}"
        ;;
    host=*)
        HOST="${i#*=}"
        ;;
    cl=*)
        CL="${i#*=}"
        ;;
    ar=*)
        AR="${i#*=}"
        ;;
    gdo=*)
        GENDLOPEN="${i#*=}"
        ;;
    cflags=*)
        CFLAGS="${i#*=}"
        use_def_cflags="no"
        ;;
    cxxflags=*)
        CXXFLAGS="${i#*=}"
        use_def_cxxflags="no"
        ;;
    cppflags=*)
        CPPFLAGS="${i#*=}"
        use_def_cppflags="no"
        ;;
    ldlfags=*)
        LDFLAGS="${i#*=}"
        use_def_ldflags="no"
        ;;
    xcflags=*)
        XCFLAGS="${i#*=}"
        ;;
    xcxxflags=*)
        XCXXFLAGS="${i#*=}"
        ;;
    xcppflags=*)
        XCPPFLAGS="${i#*=}"
        ;;
    xldlfags=*)
        XLDFLAGS="${i#*=}"
        ;;
    --no-xxd)
        check_xxd="no"
        ;;

    *)
        echo "error: unknown option: $i"
        exit 1
        ;;
esac
done

# xxd
GEN_TEMPL="gen_template_h"
if [ "x$check_xxd" = "xyes" ]; then
    xxd -v 2>/dev/null >/dev/null

    if [ $? -eq 0 ]; then
        GEN_TEMPL="gen_template_h.sh"
    fi
fi

# clang-cl / MSVC
if [ "x$CL" != "x" ]; then
    if [ "x$CC" != "x" ]; then
        echo "warning: option \`cc=$CC' is ignored"
    fi
    if [ "x$CXX" != "x" ]; then
        echo "warning: option \`cxx=$CXX' is ignored"
    fi
    if [ "x$HOST" != "x" ]; then
        echo "warning: option \`host=$HOST' is ignored"
    fi
    CC="$CL"
    CXX="$CL"
fi

# host triplet
if [ "x$HOST" != "x" ]; then
    HOST="${HOST}-"
fi

# host ar
if [ "x$AR" = "x" ]; then
    AR="${HOST}ar"
fi

# host C
if [ "x$CC" = "x" ]; then
    gcc --version 2>/dev/null >/dev/null

    if [ $? -eq 0 ]; then
        CC="${HOST}gcc"
    else
        CC="${HOST}cc"
    fi
fi

# host C++
if [ "x$CXX" = "x" ]; then
    g++ --version 2>/dev/null >/dev/null

    if [ $? -eq 0 ]; then
        CXX="${HOST}g++"
    else
        CXX="${HOST}c++"
    fi
fi

# build C
if [ "x$CCBUILD" = "x" ]; then
    gcc --version 2>/dev/null >/dev/null

    if [ $? -eq 0 ]; then
        CCBUILD="gcc"
    else
        CCBUILD="cc"
    fi
fi

# check target platform
if [ "x$CL" != "x" ]; then
    # MSVC
    def_cppflags="-DWIN32_LEAN_AND_MEAN"
    def_cflags="-W3 -O2"
    def_cxxflags="-W3 -O2 -EHsc -std:c++latest"
    def_ldflags="-link -subsystem:console -release"

    EXEEXT=".exe"
    DLL="libhelloworld-0.dll"
    DLL_CFLAGS="-DBUILDING_DLL -LD"
    UNICODE_FLAGS="-DUNICODE -D_UNICODE"
elif $CC -dumpmachine 2>/dev/null | grep mingw >/dev/null ; then
    # MinGW
    if $CXX -v --help 2>/dev/null | grep -- '-std=gnu++23' >/dev/null ; then
        std="gnu++23"
    else
        std="gnu++20"
    fi

    def_cppflags="-DWIN32_LEAN_AND_MEAN"
    def_cflags="-Wall -Wextra -O3"
    def_cxxflags="-Wall -Wextra -O3 -std=$std"

    EXEEXT=".exe"
    DLL="libhelloworld-0.dll"
    DLL_CFLAGS="-DBUILDING_DLL"
    DLL_LDFLAGS="-shared"
    UNICODE_FLAGS="-DUNICODE -D_UNICODE -municode"
    TEST_CXX11="-std=c++11"
else
    if $CXX -dumpmachine 2>/dev/null | grep gnu >/dev/null ; then
        if $CXX -v --help 2>/dev/null | grep -- '-std=gnu++23' >/dev/null ; then
            std="gnu++23"
        else
            std="gnu++20"
        fi
        def_cppflags="-D_GNU_SOURCE"
    else
        std="c++20"
    fi

    def_cflags="-Wall -Wextra -O3"
    def_cxxflags="-Wall -Wextra -O3 -std=$std"

    # library name
    if $CC -dumpmachine 2>/dev/null | grep darwin >/dev/null ; then
        DLL="libhelloworld.0.dylib"
    elif $CC -dumpmachine 2>/dev/null | grep aix >/dev/null ; then
        DLL="libhelloworld.a"
    else
        DLL="libhelloworld.so.0"
    fi

    DLL_CFLAGS="-fPIC"
    DLL_LDFLAGS="-shared"
    TEST_LDFLAGS="-Wl,-rpath,'\$\$ORIGIN'"
    TEST_CXX11="-std=c++11"
fi

# set default flags
if [ $use_def_cppflags = "yes" ]; then
    CPPFLAGS="$def_cppflags"
fi
if [ $use_def_cflags = "yes" ]; then
    CFLAGS="$def_cflags"
fi
if [ $use_def_cxxflags = "yes" ]; then
    CXXFLAGS="$def_cxxflags"
fi
if [ $use_def_ldflags = "yes" ]; then
    LDFLAGS="$def_ldflags"
fi

# set extra flags
if [ "x$XCPPFLAGS" != "x" ]; then
    CPPFLAGS="$CPPFLAGS $XCPPFLAGS"
fi
if [ "x$XCFLAGS" != "x" ]; then
    CFLAGS="$CFLAGS $XCFLAGS"
fi
if [ "x$XCXXFLAGS" != "x" ]; then
    CXXFLAGS="$CXXFLAGS $XCXXFLAGS"
fi
if [ "x$XLDFLAGS" != "x" ]; then
    LDFLAGS="$LDFLAGS $XLDFLAGS"
fi

# gendlopen tool
if [ "x$GENDLOPEN" = "x" ]; then
    GENDLOPEN="$PWD/src/gendlopen$EXEEXT"
fi

# output

cat <<EOF > settings.mk
CC            = $CC
CXX           = $CXX
CCBUILD       = $CCBUILD
AR            = $AR

EXEEXT        = $EXEEXT
GENDLOPEN     = $GENDLOPEN
GEN_TEMPL     = $GEN_TEMPL

CFLAGS        = $CFLAGS $CPPFLAGS
CXXFLAGS      = $CXXFLAGS $CPPFLAGS
LDFLAGS       = $LDFLAGS

DLL           = $DLL
UNICODE_FLAGS = $UNICODE_FLAGS
DLL_CFLAGS    = $DLL_CFLAGS
DLL_LDFLAGS   = $DLL_LDFLAGS

TEST_CFLAGS   = $CFLAGS $CPPFLAGS
TEST_CXXFLAGS = $CXXFLAGS $CPPFLAGS $TEST_CXX11
TEST_LDFLAGS  = $LDFLAGS $TEST_LDFLAGS

EOF

cat settings.mk

echo "create Makefile"
cat settings.mk Makefile.in > Makefile

echo "create src/Makefile"
cat settings.mk src/Makefile.in > src/Makefile

echo "create test/Makefile"
cat settings.mk test/Makefile.in > test/Makefile

rm settings.mk
