#!/bin/sh

gendlopen="\$(DEF_GENDLOPEN)"

opt_gcc="-O2"
opt_ld=""
opt_msc="-O2"
opt_link=""

cflags=":"
cxxflags=":"
cppflags=":"
ldflags=":"
gtk_cflags=":"
glib_cflags=":"
sdl_cflags=":"
sdl_ldflags=":"
pkgconfig=":"
ld=":"
opt=":"

check_std="yes"
win32="no"
msvc="no"
nix="yes"
with_sdl="no"
with_notify="no"
with_msgbox="no"



###############################################################################
## helper functions
###############################################################################

testfiles="test.c test.cpp test.h test.hpp test.o test.obj test.exe a.out a.exe"

create_makefile()
{
    if [ "x$with_sdl"    != "xyes" ]; then xsdl="#"; fi
    if [ "x$with_notify" != "xyes" ]; then xnotify="#"; fi
    if [ "x$with_msgbox" != "xyes" ]; then xmsgbox="#"; fi
    if [ "x$win32"       != "xyes" ]; then xwin32="#"; fi
    if [ "x$msvc"        != "xyes" ]; then xmsvc="#"; fi
    if [ "x$nix"         != "xyes" ]; then xnix="#"; fi
    if [ "x$ar"           = "x"    ]; then xar="#"; fi

    #echo "create ${1}/Makefile"

    rm -f "${1}/Makefile"
    top="$PWD"

    if [ "x${1}" = "xsrc" ]; then
        cd "${1}"

        # C++ source files
        echo "CXX_OBJS = \\" >> Makefile
        ls -1 *.cpp | sed 's|^|    |; s|cpp$|o \\|' >> Makefile
        echo "    \$(NULL)" >> Makefile
        echo "" >> Makefile

        # C++ headers
        echo "HEADERS = \\" >> Makefile
        ls -1 *.hpp | sed 's|^|    |; s|$| \\|' >> Makefile
        echo "    \$(NULL)" >> Makefile
        echo "" >> Makefile

        cd "$top"
    fi

    cat settings.mk rules.mk "${1}/Makefile.in" | \
    sed -e "s,@SDL@,$xsdl,g" \
        -e "s,@NOTIFY@,$xnotify,g" \
        -e "s,@MSGBOX@,$xmsgbox,g" \
        -e "s,@AR@,$xar,g" \
        -e "s,@W32@,$xwin32,g" \
        -e "s,@MSVC@,$xmsvc,g" \
        -e "s,@NIX@,$xnix,g" \
        >> "${1}/Makefile"

    if [ "x${1}" = "xsrc" ]; then
        cd "${1}"

        files="$(ls -1 *.cpp | sed 's|\.cpp$||')"

        for f in $files ; do
            sed "s|@FILE@|$f|g" rules.in >> Makefile
        done

        cd "$top"
    fi
}

create_test_makefiles()
{
    top="$PWD"

    cd test
    testdirs="$(ls -d 00_* c_* cxx_*)"

    cat ../settings.mk ../rules.mk > Makefile

    # clean_targets
    echo "" >> Makefile
    echo "clean_targets = \\" >> Makefile
    for d in $testdirs ; do
        echo "    clean_$d \\" >> Makefile
    done
    echo "    \$(NULL)" >> Makefile

    # BINS
    #echo "" >> Makefile
    #echo "BINS = \\" >> Makefile
    #for d in $testdirs ; do
    #    echo "    $d/main\$(EXEEXT) \\" >> Makefile
    #done
    #echo "    \$(NULL)" >> Makefile

    # TEST_MAKEFILES
    echo "" >> Makefile
    echo "TEST_MAKEFILES = \\" >> Makefile
    for d in $testdirs ; do
        echo "    $d/Makefile \\" >> Makefile
    done
    echo "    \$(NULL)" >> Makefile

    # rules
    for d in $testdirs ; do
        sed "s|@DIR@|$d|g" rules.in >> Makefile
    done

    sed -e "s,@SDL@,$xsdl,g" \
        -e "s,@NOTIFY@,$xnotify,g" \
        -e "s,@MSGBOX@,$xmsgbox,g" \
        -e "s,@AR@,$xar,g" \
        -e "s,@W32@,$xwin32,g" \
        -e "s,@MSVC@,$xmsvc,g" \
        -e "s,@NIX@,$xnix,g" \
        Makefile.in >> Makefile

    cd "$top"
    for d in $testdirs ; do
        create_makefile "test/$d"
    done
    cd "$top"
}

run_cmd()
{
    echo "$1" >> test.log
    $1 >/dev/null 2>>test.log
    ret=$?
    echo '' >> test.log
}

_check_tool()
{
    printf "check for $1 ... "
    #tool="$(which $1 2>/dev/null)"

    oldIFS="$IFS"

    # behavior of `which' isn't identical across systems
    # so we do our own lookup

    case "$(uname -s)" in
        CYGWIN*|MINGW*|MSYS*|Windows*|UWIN*)
        IFS=';'
        ;;
        *)
        IFS=':'
        ;;
    esac

    for p in $PATH ; do
        if [ -x "$p/$1" ]; then
            tool="$p/$1"
            break
        fi
    done

    # revert old IFS value
    IFS="$oldIFS"

    if [ "x$tool" = "x" ]; then
        echo "not found"
    else
        echo "$tool"
        tool="$1"  # set to command-only
    fi
}

check_tool()
{
    if [ "x$(echo $1 | grep '/')" = "x" ]; then
        tool=""
        _check_tool "$1"

        if [ "x$2" = "xexit" ] && [ "x$tool" = "x" ]; then
            echo "error: nothing found"
            exit 1
        fi
    fi
}

check_host_tool()
{
    if [ "x$(echo $1 | grep '/')" = "x" ]; then
        tool=""
        _check_tool "${host}$1"

        if [ "x$2" = "xexit" ] && [ "x$tool" = "x" ]; then
            echo "error: nothing found"
            exit 1
        fi
    fi
}

check_cc_triple()
{
    printf "check target triple of $1 ... "

    cmd="$1 -dumpmachine"
    echo "$cmd" >> test.log
    triple="$($cmd 2>>test.log)"

    if [ "x$triple" = "x" ]; then
        cmd="$1 -print-target-triple"
        echo "$cmd" >> test.log
        triple="$($cmd 2>>test.log)"
    fi

    if [ "x$triple" = "x" ]; then
        echo "nothing found"
    else
        triple=$(echo "$triple" | sed 's|-pc-|-|; s|-unknown-|-|')
        echo "$triple"
    fi
}

check_header()
{
    header=""
    printf "check for header $1 ... "

    echo "#include <$1>" > test.c
    run_cmd "$cc $CFLAGS -E test.c"

    if [ $ret -eq 0 ]; then
        header="$1"
        echo "OK"
    else
        echo "not found"
    fi

    rm -f $testfiles
}

check_libdl()
{
    printf "check if -ldl is needed ... "

    cat <<EOF > test.c
#include <dlfcn.h>
int main() {
void *handle;
handle = dlopen("foo.so", RTLD_LAZY);
(void)handle;
return 0;
}
EOF

    run_cmd "$cc -Werror test.c -o a.out"

    if [ $ret -eq 0 ]; then
        echo "no"
    else
        run_cmd "$cc -Werror test.c -o a.out -ldl"

        if [ $ret -eq 0 ]; then
            echo "yes"
            libdl="-ldl"
        else
            echo "error"
            exit 1
        fi
    fi

    rm -f $testfiles
}

check_cxx_flag()
{
    if [ "x$1" = "x1" ]; then
        flag=""
    fi

    if [ "x$flag" = "x" ]; then
        printf "check if $cxx accepts $2 ... "

        echo '' > test.cpp
        run_cmd "$cxx -Werror $2 -c test.cpp"

        if [ $ret -eq 0 ]; then
            flag="$2"
            echo "yes"
        else
            echo "no"
        fi
    fi

    rm -f $testfiles
}

check_std_version()
{
    if [ "x$1" = "xmsvc" ]; then
        check_cxx_flag 1 "-std:c++23"
        check_cxx_flag 0 "-std:c++20"
    else
        check_cxx_flag 1 "-std=gnu++23"
        check_cxx_flag 0 "-std=c++23"
        check_cxx_flag 0 "-std=gnu++20"
        check_cxx_flag 0 "-std=c++20"
    fi

    if [ "x$flag" = "x" ]; then
        echo "error: C++20 or newer is required"
        exit 1
    fi

    cxxstd="$flag"
}



###############################################################################
## parse arguments
###############################################################################

if [ "x$(pwd | grep ' ')" != "x" ]; then
    echo "error: path to source directory cannot contain spaces!"
    exit 1
fi

rm -f test.log

for i in "$@"
do
case $i in
    -help|-h|--help)
        cat <<EOL
usage: $0 OPTIONS

set compilers:
    cc=..  cxx=..  ccbuild=..

host triplet:
    host=..

set clang-cl:
    cl=..

set ld:
    ld=..

override flags:
    cflags=..  cxxflags=..  cppflags=..  ldlfags=..

append extra flags:
    xcflags=..  xcxxflags=..  xcppflags=..  xldlfags=..

set flags for GTK2 and GLib headers (ignored for win32):
    gtk-cflags=..  glib-cflags=..

set flags for SDL headers and libraries:
    sdl-cflags=..  sdl-libs=..

optimizing build type:
    opt=[release|debug|minsize|noopt]

set ar tool:
    ar=..

set pkg-config too:
    pkgconfig=..

set gendlopen tool used for cross-compiling tests:
    gdo=..

don't check for -std.. flags:
    -no-std-checks

print this help:
    -h, -help

EOL
        exit 0
        ;;

    cc=*)           cc="${i#*=}";;
    cxx=*)          cxx="${i#*=}";;
    ccbuild=*)      cc_build="${i#*=}";;
    host=*)         host="${i#*=}";;
    cl=*)           cl="${i#*=}";;
    ld=*)           ld="${i#*=}";;
    ar=*)           ar="${i#*=}";;
    pkgconfig=*)    pkgconfig="${i#*=}";;
    gdo=*)          gendlopen="${i#*=}";;
    cflags=*)       cflags="${i#*=}";;
    cxxflags=*)     cxxflags="${i#*=}";;
    cppflags=*)     cppflags="${i#*=}";;
    ldflags=*)      ldflags="${i#*=}";;
    xcflags=*)      xcflags="${i#*=}";;
    xcxxflags=*)    xcxxflags="${i#*=}";;
    xcppflags=*)    xcppflags="${i#*=}";;
    xldflags=*)     xldflags="${i#*=}";;
    opt=*)          opt="${i#*=}";;
    gtk-cflags=*)   gtk_cflags="${i#*=}";;
    glib-cflags=*)  glib_cflags="${i#*=}";;
    sdl-cflags=*)   sdl_cflags="${i#*=}";;
    sdl-libs=*)     sdl_ldflags="${i#*=}";;
    x11-cflags=*)   x11_cflags="${i#*=}";;

    -no-std-checks)
        check_std="no"
        ;;

    *)
        echo "error: unknown option: $i"
        exit 1
        ;;
esac
done

# optimization flags
case "x$opt" in
    xrelease)
        opt_gcc="-O3 -DNDEBUG -ffunction-sections -fdata-sections"
        opt_ld="-Wl,--gc-sections -s"
        opt_msc="-O2 -DNDEBUG"
        opt_link="-release"
        ;;
    xdebug)
        opt_gcc="-O0 -g"
        opt_ld=""
        opt_msc="-Od -g"
        opt_link="-debug"
        ;;
    xminsize)
        opt_gcc="-Os -DNDEBUG -ffunction-sections -fdata-sections"
        opt_ld="-Wl,--gc-sections -s"
        opt_msc="-Od -DNDEBUG -g"
        opt_link="-release"
        ;;
    xnoopt)
        opt_gcc="-O0"
        opt_ld=""
        opt_msc="-Od"
        opt_link=""
        ;;
    x:)
        ;;
    *)
        echo "warning: ignoring unknown optimization setting \`$opt'"
        ;;
esac



###############################################################################
## tests
###############################################################################

# clang-cl / MSVC
if [ "x$cl" != "x" ]; then
    cc="$cl"
    cxx="$cl"
fi

# host triplet
if [ "x$host" != "x" ]; then
    host="${host}-"
fi

# host C
if [ "x$cc" = "x" ]; then
    check_host_tool gcc

    if [ "x$tool" = "x" ]; then
        check_host_tool cc exit
    fi

    cc="$tool"
else
    check_host_tool "$cc" exit
fi

check_cc_triple "$cc"
cc_triple="$triple"

# host C++
if [ "x$cxx" = "x" ]; then
    check_host_tool g++

    if [ "x$tool" = "x" ]; then
        check_host_tool c++ exit
    fi

    cxx="$tool"
elif [ "x$cxx" != "x$cc" ]; then
    check_host_tool "$cxx" exit
fi

# build C
if [ "x$cc_build" = "x" ]; then
    if [ "$cc" = "gcc" ] || [ "$cc" = "cc" ]; then
        cc_build="$cc"
    else
        check_tool gcc

        if [ "x$tool" = "x" ]; then
            check_tool cc exit
        fi

        cc_build="$tool"
    fi
fi

# host ar
if [ "x$ar" = "x" ]; then
    check_host_tool ar
    ar="$tool"
fi

# flex
if [ "x$lex" = "x" ]; then
    check_tool flex

    if [ "x$tool" = "x" ]; then
        check_tool lex #exit
    fi

    if [ "x$tool" = "x" ]; then
        tool="lex" # normally it's not needed anyway
    fi

    lex="$tool"
fi



###############################################################################
## check target platform
###############################################################################

if [ "x$cl" != "x" ]; then
    # MSVC
    win32="yes"
    msvc="yes"
    nix="no"

    if [ "x$cppflags" = "x:" ]; then
        cppflags="-DWIN32_LEAN_AND_MEAN"
    fi
    if [ "x$cflags" = "x:" ]; then
        cflags="-W3 $opt_msc"
    fi
    if [ "x$cxxflags" = "x:" ]; then
        cxxflags="-W3 $opt_msc -EHsc"
    fi
    if [ "x$ldflags" = "x:" ]; then
        ldflags="-subsystem:console $opt_link"
    fi

    if [ "x$check_std" = "xyes" ]; then
        check_std_version msvc
        check_cxx_flag 1 "-std:c++11"
        test_cxx11="$flag"
    fi

    if [ "x$ld" = "x:" ]; then
        link_flag="-link"
    else
        link_flag="-fuse-ld=$ld -link"
    fi

    exeext=".exe"
    dll="libhelloworld-0.dll"
    dll_cflags="-DBUILDING_DLL -LD"
    unicode_flags="-DUNICODE -D_UNICODE"
else
    # GCC / Clang

    dll="libhelloworld.so.0"
    ld_library_path_test="LD_LIBRARY_PATH=\"\$\$PWD/../test/00_library:\$\$LD_LIBRARY_PATH\""

    case $cc_triple in
        *-linux-*|*-linux|*-gnu)
            cppflags="-D_GNU_SOURCE"
            ;;
        *-mingw*)
            target="mingw"
            dll="libhelloworld-0.dll"
            #ld_library_path_test="WINEPATH=\"\$\$PWD/../test/00_library;%PATH%\""
            ;;
        *-darwin)
            dll="libhelloworld.0.dylib"
            # don't need to use DYLD_LIBRARY_PATH,
            # LD_LIBRARY_PATH works too
            ;;
        *-netbsd)
            ld_library_path_test="LD_LIBRARY_PATH=\"\$\$PWD/../test/00_library:/usr/pkg/lib:\$\$LD_LIBRARY_PATH\""
            ;;
        *-haiku)
            ld_library_path_test="LIBRARY_PATH=\"\$\$PWD/../test/00_library:\$\$LIBRARY_PATH\""
            ;;
        *-aix)
            dll="libhelloworld.a"
            ;;
        *)
            ;;
    esac

    if [ "x$cflags" = "x:" ]; then
        cflags="-Wall -Wextra $opt_gcc"
    fi
    if [ "x$cxxflags" = "x:" ]; then
        cxxflags="-Wall -Wextra $opt_gcc"
    fi
    if [ "x$ldflags" = "x:" ]; then
        ldflags="$opt_ld"
    fi

    if [ "x$check_std" = "xyes" ]; then
        check_std_version
        check_cxx_flag 1 "-std=c++11"
        test_cxx11="$flag"
    fi

    if [ "x$ld" != "x:" ]; then
        link_flag="-fuse-ld=$ld"
    fi

    if [ "$target" = "mingw" ]; then
        # MinGW
        win32="yes"
        nix="no"

        if [ "x$cppflags" = "x:" ]; then
            cppflags="-DWIN32_LEAN_AND_MEAN"
        fi

        ldflags="$ldflags -mconsole"
        exeext=".exe"
        dll_cflags="-DBUILDING_DLL"
        dll_ldflags="-shared"
        unicode_flags="-DUNICODE -D_UNICODE -municode"
    else
        # *nix
        if [ "x$cppflags" = "x:" ]; then
            cppflags=""
        fi

        check_libdl

        dll_cflags="-fPIC"
        dll_ldflags="-shared"
        libdl="$libdl"
    fi
fi



###############################################################################
## check pkg-config and headers
###############################################################################

if [ "x$win32" = "xyes" ]; then
    pkgconfig=""
else
    if [ "x$pkgconfig" = "x:" ]; then
        check_host_tool pkg-config
        pkgconfig="$tool"
    fi

    have_glib_headers="no"
    have_gtk_headers="no"

    # GLib
    if [ "x$glib_cflags" = "x:" ]; then
        if [ "x$pkgconfig" = "x" ]; then
            glib_cflags=""
        else
            glib_cflags="$("$pkgconfig" --cflags glib-2.0 2>/dev/null)"
        fi
    fi

    CFLAGS="$glib_cflags"
    check_header "glib.h"

    if [ "x$header" != "x" ]; then
        check_header "glib-object.h"

        if [ "x$header" != "x" ]; then
            have_glib_headers="yes"
        fi
    fi

    # GTK
    if [ "x$gtk_cflags" = "x:" ]; then
        gtk_cflags="-Wno-deprecated-declarations"

        if [ "x$pkgconfig" != "x" ]; then
            gtk_cflags="$gtk_cflags $("$pkgconfig" --cflags gtk+-2.0 2>/dev/null)"
        fi
    fi

    CFLAGS="$gtk_cflags"
    check_header "gtk/gtk.h"

    if [ "x$header" != "x" ]; then
        have_gtk_headers="yes"
    fi

    # X11
    if [ "x$x11_cflags" = "x:" ]; then
        if [ "x$pkgconfig" = "x" ]; then
            x11_cflags=""
        else
            x11_cflags="$("$pkgconfig" --cflags x11 2>/dev/null)"
        fi
    fi

    CFLAGS="$x11_cflags"
    check_header "X11/Xlib.h"

    if [ "x$header" != "x" ]; then
        check_header "X11/Xatom.h"

        if [ "x$header" != "x" ]; then
            have_x11_headers="yes"
        fi
    fi

    # set conditionals for Makefile
    if [ "x$have_glib_headers" = "xyes" ]; then
        with_notify="yes"
    fi

    if [ "x$have_gtk_headers" = "xyes" ] && [ "x$have_x11_headers" = "xyes" ]; then
        with_msgbox="yes"
    fi
fi

# SDL
if [ "x$sdl_cflags" = "x:" ] || [ "x$sdl_ldflags" = "x:" ]; then
    if [ "x$pkgconfig" = "x" ]; then
        sdl_cflags=""
        sdl_ldflags=""
    else
        # SDL 3
        sdl_cflags="$("$pkgconfig" --cflags sdl3 2>/dev/null)"
        sdl_ldflags="$("$pkgconfig" --libs sdl3 2>/dev/null)"

        # SDL 2
        if [ "x$sdl_ldflags" = "x" ]; then
            sdl_cflags="$("$pkgconfig" --cflags sdl2 2>/dev/null)"
            sdl_ldflags="$("$pkgconfig" --libs sdl2 2>/dev/null)"
        fi

        # SDL 1.2 compat
        if [ "x$sdl_ldflags" = "x" ]; then
            sdl_cflags="$("$pkgconfig" --cflags sdl12_compat 2>/dev/null)"
            sdl_ldflags="$("$pkgconfig" --libs sdl12_compat 2>/dev/null)"
        fi

        # SDL 1
        if [ "x$sdl_ldflags" = "x" ]; then
            sdl_cflags="$("$pkgconfig" --cflags sdl 2>/dev/null)"
            sdl_ldflags="$("$pkgconfig" --libs sdl 2>/dev/null)"
        fi
    fi

    # fallback
    if [ "x$sdl_ldflags" = "x" ]; then
        sdl_ldflags="-lSDL"
    fi
fi

CFLAGS="$sdl_cflags"
check_header "SDL_loadso.h"

if [ "x$header" != "x" ]; then
    with_sdl="yes"
fi


###############################################################################
## output
###############################################################################

# examples
echo ""
echo "build notify example: $with_notify"
echo "build msgbox example: $with_msgbox"
echo "build SDL_loadso tests: $with_sdl"
echo ""

# output

cat <<EOF > settings.mk

CC            = $cc
CXX           = $cxx
CCBUILD       = $cc_build
AR            = $ar
LEX           = $lex

EXEEXT        = $exeext
DEF_GENDLOPEN = $PWD/src/gendlopen\$(EXEEXT)
GENDLOPEN     = $gendlopen

CPPFLAGS      = $cppflags $xcppflags
CFLAGS        = $cflags $xcflags \$(CPPFLAGS)
CXXFLAGS      = $cxxflags $cxxstd $xcxxflags \$(CPPFLAGS)
LDFLAGS       = $link_flag $ldflags $xldflags
GEN_CXXFLAGS  = $gen_cxxflags

DLL           = $dll
DLL_CFLAGS    = $dll_cflags
DLL_LDFLAGS   = $dll_ldflags

TEST_CFLAGS   = \$(CFLAGS) $dlmopen_cppflags -I../00_library
TEST_CXXFLAGS = \$(CXXFLAGS) $test_cxx11 $dlmopen_cppflags -I../00_library
TEST_LDFLAGS  = \$(LDFLAGS)
TEST_LIBPATH  = $ld_library_path_test
UNICODE_FLAGS = $unicode_flags
LIBDL         = $libdl

GLIB_CFLAGS   = $glib_cflags

GTK_CFLAGS    = $gtk_cflags

X11_CFLAGS    = $x11_cflags

SDL_CFLAGS    = $sdl_cflags
SDL_LDFLAGS   = $sdl_ldflags

EOF

create_makefile "."
create_makefile "src"
create_makefile "examples"
create_test_makefiles

