#!/bin/sh

testfiles="test.c test.cpp test.h test.hpp test.o test.obj test.exe a.out a.exe"

use_def_cflags="yes"
use_def_cxxflags="yes"
use_def_cppflags="yes"
use_def_ldflags="yes"

use_pkgconfig_glib="yes"
use_pkgconfig_gtk="yes"

libdl=""
have_dlmopen="no"

check_xxd="yes"
win32="no"
nix="yes"
notify="no"
appind="no"


create_makefile()
{
    if [ "x$appind" != "xyes" ]; then xappind="#"; fi
    if [ "x$notify" != "xyes" ]; then xnotify="#"; fi
    if [ "x$win32"  != "xyes" ]; then xwin32="#"; fi
    if [ "x$nix"    != "xyes" ]; then xnix="#"; fi
    if [ "x$clang"   = "x" ];    then xclang="#"; fi

    echo "create ${1}Makefile"

    cat settings.mk rules.mk "${1}Makefile.in" | \
    sed -e "s,@APPIND@,$xappind,g" \
        -e "s,@NOTIFY@,$xnotify,g" \
        -e "s,@CLANG@,$xclang,g" \
        -e "s,@W32@,$xwin32,g" \
        -e "s,@NIX@,$xnix,g" \
        > "${1}Makefile"
}

run_cmd()
{
    echo "$1" >> test.log
    $1 >/dev/null 2>>test.log
    ret=$?
    echo '' >> test.log
}

_check_tool()
{
    printf "check for $1 ... "
    tool="$(which $1)"

    if [ "x$tool" = "x" ]; then
        echo "not found"
    else
        echo "OK"
        tool="$1"
    fi
}

check_tool()
{
    tool=""

    if [ "x$tool" = "x" ]; then
        _check_tool "$1"
    fi

    if [ "x$2" = "xexit" ] && [ "x$tool" = "x" ]; then
        exit 1
    fi
}

check_host_tool()
{
    tool=""

    if [ "x$host" != "x" ]; then
        _check_tool "${host}$1"
    fi

    if [ "x$tool" = "x" ]; then
        _check_tool "$1"
    fi

    if [ "x$2" = "xexit" ] && [ "x$tool" = "x" ]; then
        exit 1
    fi
}

check_clang_triple()
{
    printf "check target triple of $1 ... "

    cmd="$1 -print-target-triple"
    echo "$cmd" >> test.log
    triple="$($cmd 2>>test.log)"

    if [ "x$triple" = "x" ]; then
        echo "nothing found"
    else
        echo "$triple"
    fi
}

check_clang_ast()
{
    clang=""
    printf "check if $1 can create an AST dump ... "

    echo '' > test.h
    run_cmd "$1 -Xclang -ast-dump -fansi-escape-codes test.h"

    if [ $ret -eq 0 ]; then
        clang="$1"
        echo "yes"
    else
        echo "no"
    fi

    rm -f $testfiles
}

check_header()
{
    header=""
    printf "check for header $1 ... "

    echo "#include <$1>" > test.c
    run_cmd "$CC $CFLAGS -E test.c"

    if [ $ret -eq 0 ]; then
        header="$1"
        echo "OK"
    else
        echo "not found"
    fi

    rm -f $testfiles
}

check_libdl()
{
    printf "check if -ldl is needed ... "

    cat <<EOF > test.c
#include <stddef.h>
#include <dlfcn.h>
int main() {
void *handle = dlopen("foo.so", RTLD_LAZY);
return (handle == NULL);
}
EOF

    run_cmd "$CC -Werror test.c -o a.out"

    if [ $ret -eq 0 ]; then
        echo "no"
    else
        run_cmd "$CC -Werror test.c -o a.out -ldl"

        if [ $ret -eq 0 ]; then
            echo "yes"
            libdl="-ldl"
        else
            echo "error"
            exit 1
        fi
    fi

    rm -f $testfiles
}

check_dlmopen()
{
    printf "check for dlmopen() ... "

    cat <<EOF > test.c
#include <stddef.h>
#include <dlfcn.h>
int main() {
void *handle = dlmopen(LM_ID_NEWLM, "foo.so", RTLD_LAZY);
return (handle == NULL);
}
EOF

    run_cmd "$CC -Werror -D_GNU_SOURCE test.c -o a.out $libdl"

    if [ $ret -eq 0 ]; then
        echo "OK"
        have_dlmopen="yes"
    else
        echo "not found"
    fi

    rm -f $testfiles
}

check_cxx_flag()
{
    if [ "x$1" = "x1" ]; then
        flag=""
    fi

    if [ "x$flag" = "x" ]; then
        printf "check if $CXX accepts $2 ... "

        echo '' > test.cpp
        run_cmd "$CXX -Werror $2 -c test.cpp"

        if [ $ret -eq 0 ]; then
            flag="$2"
            echo "yes"
        else
            echo "no"
        fi
    fi

    rm -f $testfiles
}

check_std_version()
{
    if [ "x$1" = "xmsvc" ]; then
        check_cxx_flag 1 -std:c++23
        check_cxx_flag 0 -std:c++20
    else
        check_cxx_flag 1 -std=gnu++23
        check_cxx_flag 0 -std=c++23
        check_cxx_flag 0 -std=gnu++20
        check_cxx_flag 0 -std=c++20
    fi

    if [ "x$flag" = "x" ]; then
        echo "error: C++20 or newer is required"
        exit 1
    fi

    std="$flag"
}


rm -f test.log

# parse arguments
for i in "$@"
do
case $i in
    --help|-h)
        cat <<EOL
usage: $0 OPTIONS

set compilers:
    cc=..  cxx=..  ccbuild=..

host triplet:
    host=..

set clang-cl:
    cl=..

set clang:
    clang=..

override flags:
    cflags=..  cxxflags=..  cppflags=..  ldlfags=..

append extra flags:
    xcflags=..  xcxxflags=..  xcppflags=..  xldlfags=..

set flags for GTK2 and GLib headers (ignored for win32):
    gtk-cflags=..  glib-cflags=..

set ar tool:
    ar=..

set pkg-config too:
    pkgconfig=..

set gendlopen tool used for cross-compiling tests:
    gdo=..

don't search for xxd tool:
    --no-xxd

print this help:
    -h, --help

EOL
        exit 0
        ;;

    cc=*)
        CC="${i#*=}"
        ;;
    cxx=*)
        CXX="${i#*=}"
        ;;
    ccbuild=*)
        cc_build="${i#*=}"
        ;;
    host=*)
        host="${i#*=}"
        ;;
    cl=*)
        CL="${i#*=}"
        ;;
    clang=*)
        clang="${i#*=}"
        ;;
    ar=*)
        AR="${i#*=}"
        ;;
    pkgconfig=*)
        PKG_CONFIG="${i#*=}"
        ;;
    gdo=*)
        gendlopen="${i#*=}"
        ;;
    cflags=*)
        CFLAGS="${i#*=}"
        use_def_cflags="no"
        ;;
    cxxflags=*)
        CXXFLAGS="${i#*=}"
        use_def_cxxflags="no"
        ;;
    cppflags=*)
        CPPFLAGS="${i#*=}"
        use_def_cppflags="no"
        ;;
    ldflags=*)
        LDFLAGS="${i#*=}"
        use_def_ldflags="no"
        ;;
    xcflags=*)
        XCFLAGS="${i#*=}"
        ;;
    xcxxflags=*)
        XCXXFLAGS="${i#*=}"
        ;;
    xcppflags=*)
        XCPPFLAGS="${i#*=}"
        ;;
    xldflags=*)
        XLDFLAGS="${i#*=}"
        ;;
    gtk-cflags=*)
        GTK_CFLAGS="${i#*=}"
        use_pkgconfig_gtk="no"
        ;;
    glib-cflags=*)
        GLIB_CFLAGS="${i#*=}"
        use_pkgconfig_glib="no"
        ;;
    --no-xxd)
        check_xxd="no"
        ;;

    *)
        echo "error: unknown option: $i"
        exit 1
        ;;
esac
done

# xxd
gen_template="gen_template_h"
if [ "x$check_xxd" = "xyes" ]; then
    check_tool xxd

    if [ "x$tool" != "x" ]; then
        gen_template="gen_template_h.sh"
    fi
fi

# clang-cl / MSVC
if [ "x$CL" != "x" ]; then
    CC="$CL"
    CXX="$CL"
fi

# host triplet
if [ "x$host" != "x" ]; then
    host="${host}-"
fi

# host ar
if [ "x$AR" = "x" ]; then
    check_host_tool ar exit
    AR="$tool"
fi

# host C
if [ "x$CC" = "x" ]; then
    check_host_tool gcc

    if [ "x$tool" = "x" ]; then
        check_host_tool cc exit
    fi

    CC="$tool"
else
    check_host_tool "$CC" exit
fi

# host C++
if [ "x$CXX" = "x" ]; then
    check_host_tool g++

    if [ "x$tool" = "x" ]; then
        check_host_tool c++ exit
    fi

    CXX="$tool"
elif [ "x$CXX" != "x$CC" ]; then
    check_host_tool "$CXX" exit
fi

# build C
if [ "x$cc_build" = "x" ]; then
    if [ "$CC" = "gcc" ] || [ "$CC" = "cc" ]; then
        cc_build="$CC"
    else
        check_tool gcc

        if [ "x$tool" = "x" ]; then
            check_tool cc exit
        fi

        cc_build="$tool"
    fi
fi

# host clang
if [ "x$clang" = "x" ]; then
    # check_clang_ast will set or empty the variable $clang
    if [ "x$CL" != "x" ]; then
        check_clang_ast "$CL"
    fi

    if [ "x$clang" = "x" ]; then
        check_host_tool clang
        clang="$tool"
    fi

    if [ "x$clang" != "x" ] && [ "x$CL" != "x$clang" ]; then
        check_clang_ast "$clang"
    fi
fi

# clang target triple
if [ "x$CL" != "x" ] && [ "x$clang" != "x" ]; then
    check_clang_triple "$CL"

    if [ "x$CL" != "x$clang" ] && [ "x$triple" != "x" ]; then
        save_triple="$triple"
        check_clang_triple "$clang"

        if [ "x$triple" != "x" ] && [ "x$save_triple" != "x$triple" ]; then
            echo ""
            echo "warning: target triples of $CL and $clang differ:"
            echo "$save_triple != $triple"
            echo ""
        fi
    fi
fi

# check target platform
if [ "x$CL" != "x" ]; then
    # MSVC
    check_std_version msvc

    win32="yes"
    nix="no"

    def_cppflags="-DWIN32_LEAN_AND_MEAN"
    def_cflags="-W3 -O2"
    def_cxxflags="-W3 -O2 -EHsc" #-std:c++latest
    def_ldflags="-link -subsystem:console -release"

    EXEEXT=".exe"
    DLL="libhelloworld-0.dll"
    DLL_CFLAGS="-DBUILDING_DLL -LD"
    UNICODE_FLAGS="-DUNICODE -D_UNICODE"
elif $CC -dumpmachine 2>/dev/null | grep mingw >/dev/null ; then
    # MinGW
    check_std_version
    check_cxx_flag 1 -std=c++11
    test_cxx11="$flag"

    win32="yes"
    nix="no"

    def_cppflags="-DWIN32_LEAN_AND_MEAN"
    def_cflags="-Wall -Wextra -O3"
    def_cxxflags="-Wall -Wextra -O3"

    EXEEXT=".exe"
    DLL="libhelloworld-0.dll"
    DLL_CFLAGS="-DBUILDING_DLL"
    DLL_LDFLAGS="-shared"
    UNICODE_FLAGS="-DUNICODE -D_UNICODE -municode"
else
    # *nix
    check_std_version
    check_cxx_flag 1 -std=c++11
    test_cxx11="$flag"

    check_libdl
    check_dlmopen

    #if $CXX -dumpmachine 2>/dev/null | grep gnu >/dev/null ; then
    if [ "x$have_dlmopen" = "xyes" ]; then
        def_cppflags="-D_GNU_SOURCE -DHAVE_DLMOPEN"
    fi

    def_cflags="-Wall -Wextra -O3"
    def_cxxflags="-Wall -Wextra -O3"

    # library name
    if $CC -dumpmachine 2>/dev/null | grep darwin >/dev/null ; then
        DLL="libhelloworld.0.dylib"
    elif $CC -dumpmachine 2>/dev/null | grep aix >/dev/null ; then
        DLL="libhelloworld.a"
    else
        DLL="libhelloworld.so.0"
    fi

    DLL_CFLAGS="-fPIC"
    DLL_LDFLAGS="-shared"
    TEST_LDFLAGS="-Wl,-rpath,'\$\$ORIGIN'"
    LIBDL="$libdl"
fi

# host pkg-config
if [ "x$win32" != "xyes" ] && [ "x$PKG_CONFIG" = "x" ]; then
    check_host_tool pkg-config
    PKG_CONFIG="$tool"
fi

# no pkg-config?
if [ "x$PKG_CONFIG" = "x" ]; then
    use_pkgconfig_glib="no"
    use_pkgconfig_gtk="no"
fi

# set default flags
if [ $use_def_cppflags = "yes" ]; then CPPFLAGS="$def_cppflags"; fi
if [ $use_def_cflags   = "yes" ]; then   CFLAGS="$def_cflags"; fi
if [ $use_def_ldflags  = "yes" ]; then  LDFLAGS="$def_ldflags"; fi

if [ $use_def_cxxflags = "yes" ]; then
    CXXFLAGS="$def_cxxflags $std"
    TEST_CXXFLAGS="$def_cxxflags $test_cxx11"
fi

# set extra flags
if [ "x$XCPPFLAGS" != "x" ]; then CPPFLAGS="$CPPFLAGS $XCPPFLAGS"; fi
if [ "x$XCFLAGS"   != "x" ]; then   CFLAGS="$CFLAGS $XCFLAGS"; fi
if [ "x$XCXXFLAGS" != "x" ]; then CXXFLAGS="$CXXFLAGS $XCXXFLAGS"; fi
if [ "x$XLDFLAGS"  != "x" ]; then  LDFLAGS="$LDFLAGS $XLDFLAGS"; fi

# test CXXFLAGS
if [ $use_def_cxxflags != "yes" ]; then TEST_CXXFLAGS="$CXXFLAGS"; fi

# gendlopen tool
def_gendlopen="$PWD/src/gendlopen$EXEEXT"

if [ "x$gendlopen" = "x" ]; then
    gendlopen="$PWD/src/gendlopen$EXEEXT"
fi

# check GTK2 and GLib headers
if [ "x$win32" != "xyes" ]; then
    have_glib_headers="no"
    have_gtk_headers="no"

    save_CFLAGS="$CFLAGS"

    # GLib
    if [ "x$use_pkgconfig_glib" = "xyes" ]; then
        GLIB_CFLAGS="$("$PKG_CONFIG" --cflags glib-2.0 2>/dev/null)"
    fi
    CFLAGS="$GLIB_CFLAGS"
    check_header "glib.h"

    if [ "x$header" != "x" ]; then
        check_header "glib-object.h"

        if [ "x$header" != "x" ]; then
            have_glib_headers="yes"
        fi
    fi

    # GTK
    if [ "x$use_pkgconfig_gtk" = "xyes" ]; then
        GTK_CFLAGS="$("$PKG_CONFIG" --cflags gtk+-2.0 2>/dev/null)"
        GTK_CFLAGS="$GTK_CFLAGS -Wno-deprecated-declarations"
    fi
    CFLAGS="$GTK_CFLAGS"
    check_header "gtk/gtk.h"

    if [ "x$header" != "x" ]; then
        have_gtk_headers="yes"
    fi

    CFLAGS="$save_CFLAGS"

    if [ "x$have_glib_headers" = "xyes" ]; then
        notify="yes"
    fi
    if [ "x$have_gtk_headers" = "xyes" ]; then
        appind="yes"
    fi

    echo ""
    echo "build appindicator example: $appind"
    echo "build notify example: $notify"
fi

# uuid examples
printf "build UUID example: "

if [ "x$clang" = "x" ]; then
    echo "no (clang missing)"
elif [ "x$win32" = "xyes" ]; then
    echo "win32"
else
    echo "libuuid"
fi

# output

cat <<EOF > settings.mk

CC            = $CC
CXX           = $CXX
CCBUILD       = $cc_build
AR            = $AR
CLANG         = $clang

EXEEXT        = $EXEEXT
GENDLOPEN     = $gendlopen
DEF_GENDLOPEN = $def_gendlopen
GEN_TEMPL     = $gen_template

CFLAGS        = $CFLAGS $CPPFLAGS
CXXFLAGS      = $CXXFLAGS $CPPFLAGS
LDFLAGS       = $LDFLAGS

DLL           = $DLL
UNICODE_FLAGS = $UNICODE_FLAGS
DLL_CFLAGS    = $DLL_CFLAGS
DLL_LDFLAGS   = $DLL_LDFLAGS

TEST_CFLAGS   = $CFLAGS $CPPFLAGS
TEST_CXXFLAGS = $TEST_CXXFLAGS $CPPFLAGS
TEST_LDFLAGS  = $LDFLAGS $TEST_LDFLAGS
LIBDL         = $LIBDL

GLIB_CFLAGS   = $GLIB_CFLAGS

GTK_CFLAGS    = $GTK_CFLAGS

EOF

echo ""
create_makefile
create_makefile "src/"
create_makefile "test/"
create_makefile "examples/"
rm settings.mk
