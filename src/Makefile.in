OBJS = \
	args.o \
	cio_ifstream.o \
	cio_ofstream.o \
	clang-ast.o \
	generate.o \
	main.o \
	parse.o \
	tokenize.o \
	utils.o \
	$(NULL)

HDRS = args.hpp cio_ifstream.hpp cio_ofstream.hpp gendlopen_class.hpp gendlopen.hpp types.hpp utils.hpp



.PHONY: all clean

all: gendlopen$(EXEEXT)

clean:
	$(_v)-rm -f gendlopen gen_template_h template.h *.exe *.o


gen_template_h: gen_template_h.c
	$(cc_v)$(CCBUILD) gen_template_h.c -o $@

template.h: $(GEN_TEMPL)
	$(gen_v)./$(GEN_TEMPL) templates


gendlopen$(EXEEXT): $(OBJS)
	$(cxxld_v)$(CXX) -o $@ $(OBJS) $(LDFLAGS)

$(OBJS): $(HDRS)
generate.o: template.h


args.o: args.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c args.cpp -o $@

cio_ifstream.o: cio_ifstream.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c cio_ifstream.cpp -o $@

cio_ofstream.o: cio_ofstream.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c cio_ofstream.cpp -o $@

clang-ast.o: clang-ast.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c clang-ast.cpp -o $@

generate.o: generate.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c generate.cpp -o $@

main.o: main.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c main.cpp -o $@

parse.o: parse.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c parse.cpp -o $@

tokenize.o: tokenize.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c tokenize.cpp -o $@

utils.o: utils.cpp
	$(cxx_v)$(CXX) $(CXXFLAGS) -c utils.cpp -o $@


