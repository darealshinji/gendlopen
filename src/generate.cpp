/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2023-2024 Carsten Janssen
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE
 */

/**
 * Generate the output data (STDOUT or save to file).
 */

#include <algorithm>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <filesystem>
#include <sstream>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cwchar>

#include "global.hpp"


namespace fs = std::filesystem;


namespace /* anonymous */
{

#ifdef __MINGW32__

/**
 * convert from string to wstring;
 * this is required because on MinGW std::filesystem will throw an exception
 * if the string contains non-ASCII characters (this doesn't happend with MSVC)
 */

wchar_t *char_to_wchar(const char *str)
{
    size_t len, n;
    wchar_t *buf;

    if (!str || ::mbstowcs_s(&len, NULL, 0, str, 0) != 0 || len == 0) {
        return nullptr;
    }

    buf = new wchar_t[(len + 1) * sizeof(wchar_t)];
    if (!buf) return nullptr;

    if (::mbstowcs_s(&n, buf, len+1, str, len) != 0 || n == 0) {
        delete[] buf;
        return nullptr;
    }

    buf[len] = L'\0';
    return buf;
}

std::wstring convert_filename(const std::string &str)
{
    wchar_t *buf = char_to_wchar(str.c_str());

    if (!buf) {
        std::cerr << "error: mbstowcs_s(): failed to convert string to wide characters: "
            << str << std::endl;
        std::abort();
    }

    std::wstring ws = buf;
    delete[] buf;

    return ws;
}

#define CONVERT_FILENAME(x) convert_filename(x)

#else

/* dummy */
#define CONVERT_FILENAME(x) x

#endif // __MINGW32__


/* simple getline() implementation */
bool simple_getline(FILE *fp, std::string &line)
{
    int c;

    line.clear();

    while ((c = fgetc(fp)) != EOF) {
        if (c == '\n') {
            break;
        }
        line.push_back(c);
    }

    return (line.size() > 0);
}


/* print note */
void save_note(cio::ofstream &out, bool print_date)
{
    out << "// Do not edit this file!\n"
        "// It was automatically generated by gendlopen";

    if (print_date) {
        struct tm tm = {};
        time_t t = std::time(nullptr);
        bool tm_ok;

#ifdef _WIN32
        tm_ok = (::localtime_s(&tm, &t) == 0);
#else
        tm_ok = (::localtime_r(&t, &tm) != nullptr);
#endif

        if (tm_ok) {
            out << " on " << std::put_time(&tm, "%F %T %z");
        }
    }

    out << ".\n"
        "// All changes made will be lost.\n"
        "\n";
}

/* define default library name */
void save_default_libname(
    cio::ofstream &out,
    const std::string &pfx,
    const std::string &lib_a,
    const std::string &lib_w)
{
    if (!lib_a.empty() && !lib_w.empty()) {
        out << "/* default library */\n"
            "#ifndef "  << pfx << "_DEFAULT_LIBA\n"
            "# define " << pfx << "_DEFAULT_LIBA " << lib_a << "\n"
            "#endif\n"
            "#ifndef "  << pfx << "_DEFAULT_LIBW\n"
            "# define " << pfx << "_DEFAULT_LIBW " << lib_w << "\n"
            "#endif\n\n";
    }
}

/* extra defines */
void save_extra_defines(cio::ofstream &out, const std::string &defs)
{
    if (!defs.empty()) {
        out << "/* extra defines */\n";
        out << defs << '\n';
    }
}

/* typedefs for function pointers */
void save_typedefs(cio::ofstream &out, const vstring_t &tdefs)
{
    if (!tdefs.empty()) {
        out << "/* typedefs */\n";

        for (auto &e : tdefs) {
            out << "typedef " << e << ";\n";
        }
        out << '\n';
    }
}

/* extra includes */
void save_includes(cio::ofstream &out, const vstring_t &includes)
{
    if (!includes.empty()) {
        out << "/* extra headers */\n";

        for (auto &e : includes) {
            out << "#include " << e << '\n';
        }
        out << '\n';
    }
}

void save_header_guard(cio::ofstream &out, const char *header_name, bool extern_c, bool begin)
{
    const std::string header_guard = utils::convert_to_upper(header_name);

    if (begin) {
        out << "\n"
            "#ifndef _" << header_guard << "_\n"
            "#define _" << header_guard << "_\n\n";

        if (extern_c) {
            out << "#ifdef __cplusplus\n"
                "extern \"C\" {\n"
                "#endif\n\n";
        }
    } else {
        if (extern_c) {
            out << "\n"
                "#ifdef __cplusplus\n"
                "} /* extern \"C\" */\n"
                "#endif\n";
        }

        out << "\n#endif //_" << header_guard << "_\n";
    }
}

/* print all found symbols to stdout */
void print_symbols_to_stdout(const vproto_t &objs, const vproto_t &funcs, const vstring_t &tdefs)
{
    cio::ofstream out; /* defaults to STDOUT */
    save_typedefs(out, tdefs);

    std::cout << "/* prototypes */\n";

    auto print_type = [] (const std::string &s)
    {
        if (s.back() == '*') {
            std::cout << s;
        } else {
            std::cout << s << ' ';
        }
    };

    for (const auto &e : objs) {
        print_type(e.type);
        std::cout << e.symbol << ";\n";
    }

    for (const auto &e : funcs) {
        print_type(e.type);
        std::cout << e.symbol << '(' << e.args << ");\n";
    }

    std::cout << "\n/***  " << (objs.size() + funcs.size()) << " matches  ***/" << std::endl;
}

} /* end anonymous namespace */


/* open output file for writing */
void gendlopen::open_ofstream(const fs::path &opath, cio::ofstream &ofs)
{
    if (opath.empty() || opath.filename() == "-") {
        /* default to STDOUT */
        ofs.close();
        return;
    }

    /* delete file to prevent writing data into symlink target */
    if (m_force) {
        fs::remove(opath);
    }

    /* check symlink and not its target */
    if (fs::exists(fs::symlink_status(opath))) {
        throw error("file already exists: " + opath.string());
    }

    /* open file for writing */
    if (!ofs.open(opath)) {
        throw error("failed to open file for writing: " + opath.string());
    }
}

/* read and process custom template */
void gendlopen::read_custom_template()
{
    std::string buf, line;
    bool skip_code = false;

    /* open file for reading */
    open_file file(m_custom_template);

    if (!file.is_open()) {
        throw error("failed to open file for reading: " + m_custom_template);
    }

    /* create output file */
    open_ofstream(m_ofile, m_ofs);

    FILE *fp = file.file_pointer();

    while (simple_getline(fp, buf)) {
        /* concat lines ending on '@' */
        if (buf.back() == '@') {
            buf.pop_back();
            line += buf + '\n';
            continue;
        }

        line += buf;
        substitute_line(line.c_str(), skip_code, m_ofs);
        line.clear();
    }
}

/* generate output */
void gendlopen::generate()
{
    fs::path ofhdr, ofbody;
    std::string header_name;
    cstrList_t header_data, body_data;

    /* tokenize strings from input */
    tokenize();

    /* print symbols and exit */
    if (m_print_symbols) {
        print_symbols_to_stdout(m_objects, m_prototypes, m_typedefs);
        return;
    }

    /* look for a common symbol prefix */
    get_common_prefix();

    /* use custom template (`-format' will be ignored) */
    if (!m_custom_template.empty()) {
        read_custom_template();
        return;
    }

    /* output filename */

    const bool use_stdout = (m_ofile == "-");

    if (!use_stdout) {
        ofbody = ofhdr = CONVERT_FILENAME(m_ofile);
    }

    bool output_is_c = true;

    switch (m_format)
    {
    case output::c:
        break;
    case output::cxx:
        output_is_c = false;
        break;
    case output::minimal:
        m_separate = false;
        break;
    case output::minimal_cxx:
        output_is_c = false;
        m_separate = false;
        break;
    [[unlikely]] case output::error:
        throw error("output::format == output::error");
    }

    /* disable separate files on stdout */
    if (use_stdout) {
        m_separate = false;
    }

    /* rename file extensions only if we save into separate files */
    if (m_separate) {
        if (output_is_c) {
            ofhdr.replace_extension(".h");
            ofbody.replace_extension(".c");
        } else {
            ofhdr.replace_extension(".hpp");
            ofbody.replace_extension(".cpp");
        }
    }

    /* create header filename */
    if (use_stdout) {
        header_name = m_name;
        header_name += output_is_c ? ".h" : ".hpp";
    } else {
        header_name = ofhdr.filename().string();
    }

    /* save pointers to template lines in header_data and body_data */
    data::create_template_data_lists(header_data, body_data, m_format, m_separate);


    /*************** header data ***************/
    open_ofstream(ofhdr, m_ofs);                  /* open stream */
    save_note(m_ofs, m_print_date);               /* top note */
    data::save_license_data(m_ofs);               /* license */
    save_header_guard(m_ofs, header_name.c_str(), /* header guard begin */
        output_is_c, true);
    data::save_filename_macros_data(m_ofs);       /* filename macros */
    save_extra_defines(m_ofs, m_defines);         /* #defines */
    save_default_libname(m_ofs, m_name_upper,     /* default library name */
        m_deflib_a, m_deflib_w);
    save_includes(m_ofs, m_includes);             /* #includes */
    save_typedefs(m_ofs, m_typedefs);             /* typedefs */
    substitute(header_data, m_ofs);               /* header template */
    save_header_guard(m_ofs, header_name.c_str(), /* header guard end */
        output_is_c, false);
    m_ofs.close();                                /* close stream */

    /**************** body data ****************/
    if (m_separate) {
        open_ofstream(ofbody, m_ofs_body);        /* open stream */
        save_note(m_ofs_body, m_print_date);      /* note */
        data::save_license_data(m_ofs_body);      /* license */

        m_ofs_body << "#include \""               /* include header file */
            << header_name << "\"\n\n";
        substitute(body_data, m_ofs_body);        /* body template */
    }
}

