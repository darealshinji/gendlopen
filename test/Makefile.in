
BINS = \
	c_test$(EXEEXT) \
	c_auto_free$(EXEEXT) \
	c_autoload$(EXEEXT) \
	c_minimal$(EXEEXT) \
	c_win32_wide$(EXEEXT) \
	c_multi$(EXEEXT) \
	cxx_test$(EXEEXT) \
	cxx_autoload$(EXEEXT) \
	cxx_minimal$(EXEEXT) \
	cxx_win32_wide$(EXEEXT) \
	cxx_multi$(EXEEXT) \
	helloworld_example_dl$(EXEEXT)

GEN_SOURCES = \
	libhelloworld_dl.c \
	libhelloworld_dl.h \
	c_test.h \
	c_auto_free.h \
	c_autoload.h \
	c_minimal.h \
	c_win32_wide.h \
	c_multi.h \
	cxx_test.hpp \
	cxx_autoload.hpp \
	cxx_minimal.hpp \
	cxx_win32_wide.hpp \
	cxx_multi.hpp

GENHDR = $(GENDLOPEN) -i helloworld.txt -f -o
WINE = WINEDEBUG=-all wine



all: $(BINS)

$(BINS): $(DLL) $(GEN_SOURCES)

clean:
	rm -f $(DLL) $(BINS) *.exe *.o *.obj *.a *.lib *.dll *.so *.exp
	rm -f $(GEN_SOURCES)

run_tests: $(BINS)
	for x in $(BINS) ; do \
	  echo $$x ; ./$$x ; echo ; \
	done

run_tests_wine: $(BINS)
	for x in $(BINS) ; do \
	  echo $$x ; $(WINE) $$x ; echo ; \
	done


# DLL

$(DLL):
	$(CC) $(DLL_CFLAGS) helloworld.c -o $@ $(TEST_LDFLAGS) $(DLL_LDFLAGS)


# C test files

c_test$(EXEEXT): c_test.h
	$(CC) $(TEST_CFLAGS) c_test.c -o $@ $(TEST_LDFLAGS)

c_auto_free$(EXEEXT): c_auto_free.h
	$(CC) $(TEST_CFLAGS) c_auto_free.c -o $@ $(TEST_LDFLAGS)

c_autoload$(EXEEXT): c_autoload.h
	$(CC) $(TEST_CFLAGS) c_autoload.c -o $@ $(TEST_LDFLAGS)

c_minimal$(EXEEXT): c_minimal.h
	$(CC) $(TEST_CFLAGS) c_minimal.c -o $@ $(TEST_LDFLAGS)

c_win32_wide$(EXEEXT): c_win32_wide.h
	$(CC) $(TEST_CFLAGS) $(UNICODE_FLAGS) c_win32_wide.c -o $@ $(TEST_LDFLAGS)


# C multiple parts test

c_multi_part1.c c_multi_part2.c c_multi.c: c_multi.h

c_multi.o: c_multi.c
	$(CC) $(TEST_CFLAGS) -c c_multi.c -o $@

c_multi_part1.o: c_multi_part1.c
	$(CC) $(TEST_CFLAGS) -c c_multi_part1.c -o $@

c_multi_part2.o: c_multi_part2.c
	$(CC) $(TEST_CFLAGS) -c c_multi_part2.c -o $@

c_multi$(EXEEXT): c_multi_part1.o c_multi_part2.o c_multi.o
	$(CC) c_multi_part1.o c_multi_part2.o c_multi.o -o $@ $(TEST_LDFLAGS)


# C++ test files

cxx_test$(EXEEXT): cxx_test.hpp
	$(CXX) $(TEST_CXXFLAGS) cxx_test.cpp -o $@ $(TEST_LDFLAGS)

cxx_autoload$(EXEEXT): cxx_autoload.hpp
	$(CXX) $(TEST_CXXFLAGS) cxx_autoload.cpp -o $@ $(TEST_LDFLAGS)

cxx_minimal$(EXEEXT): cxx_minimal.hpp
	$(CXX) $(TEST_CXXFLAGS) cxx_minimal.cpp -o $@ $(TEST_LDFLAGS)

cxx_win32_wide$(EXEEXT): cxx_win32_wide.hpp
	$(CXX) $(TEST_CXXFLAGS) cxx_win32_wide.cpp -o $@ $(TEST_LDFLAGS)


# C++ multiple parts test

cxx_multi_part1.cpp cxx_multi_part2.cpp cxx_multi.cpp: cxx_multi.hpp

cxx_multi.o: cxx_multi.cpp
	$(CXX) $(TEST_CXXFLAGS) -c cxx_multi.cpp -o $@

cxx_multi_part1.o: cxx_multi_part1.cpp
	$(CXX) $(TEST_CXXFLAGS) -c cxx_multi_part1.cpp -o $@

cxx_multi_part2.o: cxx_multi_part2.cpp
	$(CXX) $(TEST_CXXFLAGS) -c cxx_multi_part2.cpp -o $@

cxx_multi$(EXEEXT): cxx_multi_part1.o cxx_multi_part2.o cxx_multi.o
	$(CXX) cxx_multi_part1.o cxx_multi_part2.o cxx_multi.o -o $@ $(TEST_LDFLAGS)


# static fake library test

libhelloworld_dl.o: libhelloworld_dl.c
	$(CC) $(TEST_CFLAGS) -c libhelloworld_dl.c -o $@

libhelloworld_dl.a: libhelloworld_dl.o
	$(AR) cr $@ libhelloworld_dl.o

helloworld_example_dl$(EXEEXT): libhelloworld_dl.a
	$(CC) $(TEST_CFLAGS) -DBUILDING_STATIC helloworld_example.c -o $@ libhelloworld_dl.a $(TEST_LDFLAGS)


# generate headers

libhelloworld_dl.h: libhelloworld_dl.c

libhelloworld_dl.c:
	$(GENHDR) $@ --separate --library=API:0:helloworld \
	  --include=helloworld.h -DBUILDING_STATIC -DGDO_ENABLE_AUTOLOAD

c_test.h:
	$(GENHDR) $@ -DGDO_WRAP_FUNCTIONS

c_auto_free.h:
	$(GENHDR) $@ --skip-parameter-names

c_autoload.h:
	$(GENHDR) $@

c_minimal.h:
	$(GENHDR) $@ --format=minimal

c_win32_wide.h:
	$(GENHDR) $@

c_multi.h:
	$(GENHDR) $@ --separate --library=API:0:helloworld \
	  --include=helloworld.h -DGDO_WRAP_FUNCTIONS -DGDO_ENABLE_AUTOLOAD -DBUILDING_STATIC

cxx_test.hpp:
	$(GENHDR) $@ --format=C++ --skip-parameter-names

cxx_autoload.hpp:
	$(GENHDR) $@ --format=C++ --library=API:0:helloworld

cxx_minimal.hpp:
	$(GENHDR) $@ --format=minimal-C++

cxx_win32_wide.hpp:
	$(GENHDR) $@ --format=C++

cxx_multi.hpp:
	$(GENHDR) $@ --format=C++ --separate --library=API:0:helloworld \
	  --include=helloworld.h -DGDO_ENABLE_AUTOLOAD -DBUILDING_STATIC

